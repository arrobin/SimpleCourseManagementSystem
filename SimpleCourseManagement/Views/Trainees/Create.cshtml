@model SimpleCourseManagement.Models.TraineeCourse

@{
    if (Session["UserDetailsId"] == null)
    {
        Response.Redirect("~/Login/Index");
    }
    if (Convert.ToInt32(Session["UserRoleId"]) == 1)
    {
        Response.Redirect("~/Login/Index");
    }
    ViewBag.Title = "Create";
}
@using (Html.BeginForm("Create", "Trainees", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="col-md-6">
        <div class="content-box-large">
            <div class="panel-heading">
                <div class="panel-title">Trainee Registration</div>
                <label style="color:red" class="field-validation-error">@ViewBag.CodeExist</label>
                <label style="color:red" class="field-validation-error">@ViewBag.Required</label>
            </div>
            <div class="panel-body">
                <fieldset>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <label>Search Phone Number</label>
                        <input id="phone" name="phone" type="text" class="form-control"><br>
                        <input id="traineeSearchByPhone" type="button" class="btn btn-primary" value="Search" />
                        @*@Html.EditorFor(model => model.Trainee.TraineeName, new { htmlAttributes = new { @class = "form-control" } })*@
                    </div>
                    <input id="TraineeId" name="TraineeId" type="hidden" value="">
                    <div class="form-group">
                        <label>Trainee Code</label>
                        <input id="TraineeCode" name="TraineeCode" type="text" class="form-control"><br>
                        @*@Html.EditorFor(model => model.TraineeCode, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.TraineeCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>Course Code</label>
                        <select id="CourseId" name="CourseId" class="form-control">
                            <option value="">Select One</option>
                            @foreach (var course in ViewBag.Courses)
                            {
                                <option value="@course.CourseId">@course.CourseCode</option>
                            }
                        </select>

                    </div>
                    <div class="form-group">
                        <label class="form-group">Batch Code</label>
                        <select class="form-control" id="BatchId" name="BatchId"></select>
                        @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label>Trainee Name</label>
                        <input id="TraineeName" name="TraineeName" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.TraineeName, new { id= "TraineeName", htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.TraineeName, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label>Trainee Image</label>
                        <input class="form-control" type="file" name="file" value="Browse" />
                        @Html.ValidationMessageFor(model => model.Trainee.TraineeImage, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Father's Name</label>
                        <input id="FatherName" name="FatherName" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.FatherName, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.FatherName, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Mother's Name</label>
                        <input id="MotherName" name="MotherName" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.MotherName, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.MotherName, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label>Gender</label><br>
                        <input type="radio" id="Gender" name="Gender" value="Male">Male<br />
                        <input type="radio" id="Gender" name="Gender" value="Female">Female<br />


                        @*<label class="radio radio-inline">
                            <input id="Gender" name="Gender" type="radio">
                            Male
                        </label>
                        <label class="radio radio-inline">
                            <input id="Gender" name="Gender" type="radio">
                            Female
                        </label>*@
                        @*@Html.RadioButtonFor(model => model.Trainee.Gender, "Male")
                        @Html.Label("Male")*@
                        @*@Html.RadioButtonFor(model => model.Trainee.Gender, "Female ")
                        @Html.Label("Female")*@
                        @Html.ValidationMessageFor(model => model.Trainee.Gender, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Age</label>
                        <input id="Age" name="Age" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.Age, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.Age, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Address</label>
                        <input id="Address" name="Address" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.Address, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.Address, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Contact Number</label>
                        <input id="ContactNumber" name="ContactNumber" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.ContactNumber, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>Email</label>
                        <input id="Email" name="Email" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.Email, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.Email, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("EmailExist", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>National ID Card</label>
                        <input id="NationalIdCard" name="NationalIdCard" type="text" class="form-control">
                        @*@Html.EditorFor(model => model.Trainee.NationalIdCard, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Trainee.NationalIdCard, "", new { @class = "text-danger" })
                        @Html.ValidationMessage("NIDRepeat", new { @class = "text-danger" })
                    </div>

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.Result, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Result, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Result, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    @*<div class="form-group">
                            @Html.LabelFor(model => model.UserDetailsId, "UserDetailsId", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("UserDetailsId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UserDetailsId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CreatedDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.CreatedDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CreatedDateTime, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>
}
@*@if (ViewBag.SizeConflict == true)
    {
        <span>Size must be within 300KB!</span>
    }
    else if (ViewBag.UploadSuccess != true)
    {
        <span>Upload Not Completed Successfully!</span>
    }
    else
    {
        <span>Upload Completed Successfully!</span>
    }*@